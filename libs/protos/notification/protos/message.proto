/**
 * Copyright (c) 2022 Peking University and Peking University Institute for Computing and Digital Economy
 * SCOW is licensed under Mulan PSL v2.
 * You can use this software according to the terms and conditions of the Mulan PSL v2.
 * You may obtain a copy of Mulan PSL v2 at:
 *          http://license.coscl.org.cn/MulanPSL2
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v2 for more details.
 */

syntax = "proto3";

package scow_notification;

import "protos/common.proto";
import "protos/message_type.proto";
import "google/protobuf/struct.proto";

message Message {
  uint64 id = 1;
  MessageType message_type = 2;
  google.protobuf.Struct metadata = 3;
  repeated string descriptions = 4;
  string created_at = 5;
  string updated_at = 6;
}

message SystemSendMessageRequest {
  string system_id = 1;
  optional TargetType target_type = 2;
  repeated string target_ids = 3;
  string message_type = 4;
  google.protobuf.Struct metadata = 5;
  repeated string description_data = 6;
  optional MessageType message_type_template = 7;
}

message SystemSendMessageResponse {
}

message AdminSendMessageRequest {
  optional TargetType target_type = 1;
  repeated string target_ids = 2;
  string message_type = 3;
  string title = 4;
  string content = 5;
  repeated NoticeType notice_types = 6;
}

message AdminSendMessageResponse {
}

message ListMessagesRequest {
  string user_id = 1;
  optional string message_type = 2;
  optional string category = 3;
  optional NoticeType notice_type = 4;
  optional ReadStatus read_status = 5;
  optional uint32 page = 6;
  optional uint32 pageSize = 7;
}

message ListMessagesResponse {
  optional uint64 total_count = 1;
  repeated Message messages = 2;
}

message GetUnreadMessagesRequest {
  string user_id = 1;
  optional NoticeType notice_type = 2;
}

message GetUnreadMessagesResponse {
  uint64 total_count = 1;
  repeated Message messages = 2;
}

message MarkMessageReadRequest {
  string user_id = 1;
  uint64 message_id = 2;
}

message MarkMessageReadResponse {
}

message MarkAllMessagesReadRequest {
  string user_id = 1;
}

message MarkAllMessagesReadResponse {

}

message DeleteMessagesRequest {
  string user_id = 1;
  repeated uint64 message_ids = 2;
}

message DeleteMessagesResponse {

}

message DeleteAllReadMessagesRequest {
  string user_id = 1;
}

message DeleteAllReadMessagesResponse {

}

service MessageService {
  rpc AdminSendMessage(AdminSendMessageRequest) returns (AdminSendMessageResponse);
  rpc SystemSendMessage(SystemSendMessageRequest) returns (SystemSendMessageResponse);

  rpc ListMessages(ListMessagesRequest) returns (ListMessagesResponse);

  rpc GetUnreadMessages(GetUnreadMessagesRequest) returns (GetUnreadMessagesResponse);
  rpc MarkMessageRead(MarkMessageReadRequest) returns (MarkMessageReadResponse);
  rpc MarkAllMessagesRead(MarkAllMessagesReadRequest) returns (MarkAllMessagesReadResponse);

  rpc DeleteMessages(DeleteMessagesRequest) returns (DeleteMessagesResponse);
  rpc DeleteAllReadMessages(DeleteAllReadMessagesRequest) returns (DeleteAllReadMessagesResponse);

}
